{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {t_cljs$spec51806 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec51806, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 636, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, form {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 21, :column 1, :end-line 21, :end-column 33, :dynamic true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:name cljs.spec/*coll-error-limit*, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 35, :column 1, :end-line 35, :end-column 34, :dynamic true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, op-explain {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 962, :column 8, :end-line 962, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, alt-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 846, :column 19, :end-line 846, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 846, :end-line 846, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 533, :column 8, :end-line 533, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 533, :end-line 533, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, ->t_cljs$spec51703 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta51704])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec51703, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta51704]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 553, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta51704])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, def-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 248, :column 19, :end-line 248, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *runtime-asserts* {:name cljs.spec/*runtime-asserts*, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1223, :column 1, :end-line 1225, :end-column 20, :private true, :dynamic true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1225, :column 3, :end-line 1225, :end-column 20, :private true, :dynamic true}}, regex-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1094, :column 19, :end-line 1094, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1094, :end-line 1094, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 633, :column 19, :end-line 633, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec/merge-spec-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 166, :column 7, :end-line 166, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 913, :column 8, :end-line 913, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 590, :column 8, :end-line 590, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, MAX_INT {:name cljs.spec/MAX_INT, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}}, check-asserts {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1233, :column 7, :end-line 1233, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec/check-asserts, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1233, :end-line 1233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 844, :column 8, :end-line 844, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 844, :end-line 844, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1241, :column 7, :end-line 1241, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec/assert*, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1241, :end-line 1241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1189, :column 7, :end-line 1189, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}}, accept? {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 781, :column 8, :end-line 781, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 15, :method-params ([p__51841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 601, :column 19, :end-line 601, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 601, :end-line 601, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 779, :column 8, :end-line 779, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 779, :end-line 779, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 291, :column 8, :end-line 291, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, ->t_cljs$spec52075 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52076])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec52075, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52076]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1142, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52076])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, map-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 325, :column 19, :end-line 325, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 32, :method-params ([p__51600]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, reg-resolve! {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 73, :column 8, :end-line 73, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 1068, :column 8, :end-line 1068, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1068, :end-line 1068, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 843, :column 8, :end-line 843, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, with-name {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 51, :column 8, :end-line 51, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, explain {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 212, :column 7, :end-line 212, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 54, :column 8, :end-line 54, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 275, :column 1, :end-line 275, :end-column 18, :declared true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 275, :column 10, :end-line 275, :end-column 18, :declared true}}, t_cljs$spec51677 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec51677, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 444, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen* {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, ->t_cljs$spec52069 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52070])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec52069, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52070]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1142, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta52070])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, or-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 539, :column 19, :end-line 539, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 112, :column 8, :end-line 112, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 27, :column 1, :end-line 27, :end-column 34, :dynamic true, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :impls #{cljs.spec/t_cljs$spec52069 cljs.spec/t_cljs$spec52056 cljs.spec/t_cljs$spec51666 cljs.spec/t_cljs$spec51809 cljs.spec/t_cljs$spec51825 cljs.spec/t_cljs$spec51603 cljs.spec/t_cljs$spec51696 cljs.spec/t_cljs$spec51677 cljs.spec/t_cljs$spec52075 cljs.spec/t_cljs$spec51795 cljs.spec/t_cljs$spec51633 cljs.spec/t_cljs$spec51691 cljs.spec/t_cljs$spec51806 cljs.spec/t_cljs$spec51703 cljs.spec/t_cljs$spec51792 cljs.spec/t_cljs$spec52059}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 121, :column 7, :end-line 121, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 311, :column 7, :end-line 311, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, t_cljs$spec51696 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec51696, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 553, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec51603 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec51603, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 333, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 235, :column 7, :end-line 235, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, ->t_cljs$spec51825 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count map__51820 check? gfn gen-max pred kindform conform-keys kind-form addcv vec__51822 cfns distinct kindfn kfn gen-into p__51819 count min-count opts kind conform-all conform-into meta51826])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec51825, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :method-params ([form max-count map__51820 check? gfn gen-max pred kindform conform-keys kind-form addcv vec__51822 cfns distinct kindfn kfn gen-into p__51819 count min-count opts kind conform-all conform-into meta51826]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 698, :max-fixed-arity 25, :fn-var true, :arglists (quote ([form max-count map__51820 check? gfn gen-max pred kindform conform-keys kind-form addcv vec__51822 cfns distinct kindfn kfn gen-into p__51819 count min-count opts kind conform-all conform-into meta51826])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec51825 {:num-fields 25, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec51825, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 698, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :line 41, :column 4, :end-line 41, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "file:/Users/turbopape/.m2/repository/org/clojure/clojurescript/1.9.229/clojurescript-1.9.229.jar!/cljs/spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ...}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec}, :cljs.analyzer/constants {:seen #{form meta51692 tag max-count :args meta51678 :max-tries :path :req-un :opt-un cljs.spec/keys unc :cljs.spec/invalid map__51820 meta51807 cljs.spec/merge :p2 :ret :gfn :pred-exprs :into vector? :gen-max map :shrunk :fn regex-spec-impl merge-spec-impl cljs.core/vector? predx :rep+ p1__52081# :cljs.spec/amp cljs.core/= :opt-keys aform :pred dval :splice and-spec-impl check? forms opt argspec :else :cljs.spec/k map-spec-impl :ks cljs.core/count req-un ...}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/gfn :cljs.spec/problems :path :pred :val :reason :via :in :cljs.spec/recursion-limit :args :cljs.spec/invalid :cljs.spec/args :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys opt map-spec-impl :skip-wiki :arglists :doc quote :keys :as req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms gfn argm ...]}, :doc nil}