{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {form {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 162, :column 7, :end-line 162, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, t_cljs$spec55332 {:num-fields 5, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec55332, :file "js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1352, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nilable-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1348, :column 19, :end-line 1348, :end-column 31, :skip-wiki true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, :name cljs.spec/nilable-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 31, :method-params ([form pred gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1348, :end-line 1348, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, *recursion-limit* {:meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :name cljs.spec/*recursion-limit*, :file "js/compiled/out/cljs/spec.cljs", :end-column 33, :column 1, :dynamic true, :line 21, :end-line 21, :tag number, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :name cljs.spec/*coll-error-limit*, :file "js/compiled/out/cljs/spec.cljs", :end-column 34, :column 1, :dynamic true, :line 35, :end-line 35, :tag number, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, explain-printer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 214, :column 7, :end-line 214, :end-column 22, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, :name cljs.spec/explain-printer, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 22, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, op-explain {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1100, :column 8, :end-line 1100, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1100, :end-line 1100, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, Specize {:meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 123, :column 14, :end-line 123, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {specize* [[_] [_ form]]}}}, :protocol-symbol true, :name cljs.spec/Specize, :file "js/compiled/out/cljs/spec.cljs", :end-column 21, :column 1, :line 123, :protocol-info {:methods {specize* [[_] [_ form]]}}, :info nil, :end-line 123, :tag any, :impls #{cljs.spec/t_cljs$spec54856 cljs.spec/t_cljs$spec55326 cljs.spec/t_cljs$spec54994 cljs.spec/t_cljs$spec54874 cljs.spec/t_cljs$spec55335 cljs.spec/t_cljs$spec54791 cljs.core/Keyword cljs.spec/t_cljs$spec54841 cljs.spec/t_cljs$spec55309 cljs.spec/t_cljs$spec55332 cljs.spec/t_cljs$spec55303 default cljs.spec/t_cljs$spec54998 cljs.spec/t_cljs$spec55290 cljs.spec/t_cljs$spec55028 cljs.spec/t_cljs$spec54896 cljs.spec/t_cljs$spec54888 cljs.spec/t_cljs$spec55015 cljs.spec/t_cljs$spec55012 cljs.spec/t_cljs$spec54752 cljs.core/Symbol cljs.spec/t_cljs$spec55293 cljs.spec/t_cljs$spec55329}, :doc nil, :jsdoc ("@interface")}, ->t_cljs$spec54896 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta54897])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec54896, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :method-params ([keys forms preds gfn id kps specs cform meta54897]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta54897])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 984, :column 19, :end-line 984, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 984, :end-line 984, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 604, :column 8, :end-line 604, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, pvalid? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 362, :column 8, :end-line 362, :end-column 15, :private true, :arglists (quote ([pred x] [pred x form])), :doc "internal helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/pvalid?, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}, :method-params ([pred x] [pred x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 3, :fn-var true, :arglists ([pred x] [pred x form]), :doc "internal helper function that returns true when x is valid for spec."}, ->t_cljs$spec54841 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta54842])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec54841, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :method-params ([form pred gfn cpred? unc meta54842]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 468, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta54842])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, def-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 290, :column 19, :end-line 290, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *explain-out* {:name cljs.spec/*explain-out*, :file "js/compiled/out/cljs/spec.cljs", :line 246, :column 1, :end-line 246, :end-column 29, :dynamic true, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 246, :column 16, :end-line 246, :end-column 29, :dynamic true}}, *runtime-asserts* {:meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1419, :column 3, :end-line 1419, :end-column 20, :private true, :dynamic true}, :private true, :name cljs.spec/*runtime-asserts*, :file "js/compiled/out/cljs/spec.cljs", :end-column 20, :column 1, :dynamic true, :line 1417, :end-line 1419, :tag boolean}, regex-spec-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1232, :column 19, :end-line 1232, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1232, :end-line 1232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 764, :column 19, :end-line 764, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec/merge-spec-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 764, :end-line 764, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 200, :column 7, :end-line 200, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1051, :column 8, :end-line 1051, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1051, :end-line 1051, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 689, :column 8, :end-line 689, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 689, :end-line 689, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, MAX_INT {:name cljs.spec/MAX_INT, :file "js/compiled/out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}, :tag number}, check-asserts {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1427, :column 7, :end-line 1427, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec/check-asserts, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1427, :end-line 1427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 982, :column 8, :end-line 982, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1435, :column 7, :end-line 1435, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec/assert*, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1435, :end-line 1435, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1383, :column 7, :end-line 1383, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1383, :end-line 1383, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "js/compiled/out/cljs/spec.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}, :tag any}, accept? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 919, :column 8, :end-line 919, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 15, :method-params ([p__55064]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 919, :end-line 919, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 700, :column 19, :end-line 700, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 917, :column 8, :end-line 917, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 917, :end-line 917, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 333, :column 8, :end-line 333, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, t_cljs$spec55303 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec55303, :file "js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1284, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, map-spec-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 376, :column 19, :end-line 376, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 32, :method-params ([p__54749]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, ->t_cljs$spec54888 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta54889])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec54888, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :method-params ([keys forms preds gfn id kps specs cform meta54889]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta54889])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reg-resolve! {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 66, :column 8, :end-line 66, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 1206, :column 8, :end-line 1206, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1206, :end-line 1206, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 981, :column 8, :end-line 981, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "js/compiled/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 981, :end-line 981, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, with-name {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 85, :column 8, :end-line 85, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, explain {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 254, :column 7, :end-line 254, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 93, :column 8, :end-line 93, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "js/compiled/out/cljs/spec.cljs", :line 317, :column 1, :end-line 317, :end-column 18, :declared true, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 317, :column 10, :end-line 317, :end-column 18, :declared true}}, t_cljs$spec54856 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec54856, :file "js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 504, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, t_cljs$spec55028 {:num-fields 24, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec55028, :file "js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 829, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 610, :column 19, :end-line 610, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 610, :end-line 610, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 140, :column 8, :end-line 140, :end-column 15, :private true, :arglists (quote ([s] [s form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/specize, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}, :method-params ([s] [s form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s form])}, ->t_cljs$spec55015 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta55016])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec55015, :variadic false, :file "js/compiled/out/cljs/spec.cljs", :method-params ([forms preds gfn meta55016]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 767, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta55016])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec54791 {:num-fields 19, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec54791, :file "js/compiled/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 383, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *fspec-iterations* {:meta {:file "/Users/turbopape/work/tasks/js/compiled/out/cljs/spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :name cljs.spec/*fspec-iterations*, :file "js/compiled/out/cljs/spec.cljs", :end-column 34, :column 1, :dynamic true, :line 27, :end-line 27, :tag number, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, ...}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag max-count :args meta55013 :max-tries :path :req-un :opt-un cljs.spec/keys meta55016 unc :cljs.spec/invalid cljs.spec/merge :p2 :ret :gfn meta55294 :pred-exprs meta55304 :into :keys-pred vector? :gen-max meta54842 map :shrunk :fn predx :rep+ :cljs.spec/amp cljs.core/= cljs.spec/nonconforming :opt-keys aform keys->specnames :pred dval :splice check? forms opt argspec :else meta55310 meta54875 :cljs.spec/k :ks meta55330 cljs.core/count ...}, :order [:cljs.spec/op :cljs.spec/name :cljs.spec/unknown :cljs.spec/invalid fn % :else :cljs.spec/gfn :cljs.spec/problems :path :pred :val :reason :via :in :cljs.spec/recursion-limit :args :cljs.spec/args :opt :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys keys->specnames opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs map__54750 p__54749 req id req-keys opt-specs k->s pred-forms ...]}, :doc nil}