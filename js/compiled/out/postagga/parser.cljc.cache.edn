{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name postagga.parser, :imports nil, :requires {postagga.tagger postagga.tagger}, :uses {viterbi postagga.tagger}, :defs {matches? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 8, :column 7, :end-line 8, :end-column 15, :arglists (quote ([input-item current-tag-alternatives]))}, :name postagga.parser/matches?, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 15, :method-params ([input-item current-tag-alternatives]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-item current-tag-alternatives]))}, accept-tag {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([input-item tag-stack])), :doc "Verifies if an input like: [product NPP] correponds to\n  one of the keys stored in the head of tag-stack, which would be an\n  element like #{ :multi #{:Noun Value...}}, or if it is a checkpoint,\n  to notify the caller to construct a part of the task. the :multi in some state\n  head of stack means that this token can be met multiple times,\n  causing the stack to keep it when ever we find an item corresponding\n  to it, or consuming it an moving forward if the element correspond\n  to the next status."}, :name postagga.parser/accept-tag, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 17, :method-params ([input-item tag-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-item tag-stack])), :doc "Verifies if an input like: [product NPP] correponds to\n  one of the keys stored in the head of tag-stack, which would be an\n  element like #{ :multi #{:Noun Value...}}, or if it is a checkpoint,\n  to notify the caller to construct a part of the task. the :multi in some state\n  head of stack means that this token can be met multiple times,\n  causing the stack to keep it when ever we find an item corresponding\n  to it, or consuming it an moving forward if the element correspond\n  to the next status."}, fast-forward {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 55, :column 7, :end-line 55, :end-column 19, :arglists (quote ([tag-stack])), :doc "Goes FFW in a tag-stack until it finds a step specification. "}, :name postagga.parser/fast-forward, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 19, :method-params ([tag-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag-stack])), :doc "Goes FFW in a tag-stack until it finds a step specification. "}, get-value? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([stack-item]))}, :name postagga.parser/get-value?, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 17, :method-params ([stack-item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack-item]))}, parse-sentence-w-a-tag-stack {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 69, :column 7, :end-line 69, :end-column 35, :arglists (quote ([pos-tagger-fn sentence init-tag-stack optional-steps]))}, :name postagga.parser/parse-sentence-w-a-tag-stack, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 35, :method-params ([pos-tagger-fn sentence init-tag-stack optional-steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pos-tagger-fn sentence init-tag-stack optional-steps]))}, parse-tags-rules {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/parser.cljc", :line 129, :column 7, :end-line 129, :end-column 23, :arglists (quote ([tokenizer-fn pos-tagger-fn rules sentence])), :doc "Tries to parse the sentence according to rules (tag stacks). If it finds a\n  match, will return it. else, it'll return the errors it found"}, :name postagga.parser/parse-tags-rules, :variadic false, :file "js/compiled/out/postagga/parser.cljc", :end-column 23, :method-params ([tokenizer-fn pos-tagger-fn rules sentence]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tokenizer-fn pos-tagger-fn rules sentence])), :doc "Tries to parse the sentence according to rules (tag stacks). If it finds a\n  match, will return it. else, it'll return the errors it found"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:errors :default :rule :item :optional-steps :get-value :output :result :multi :id :expected :tag-stack :error :input :new-stack :items :step :data}, :order [:step :new-stack :multi :default :get-value :items :error :expected :item :output :result :input :tag-stack :optional-steps :rule :errors :data :id]}, :doc nil}