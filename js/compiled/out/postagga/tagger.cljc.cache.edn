{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name postagga.tagger, :imports nil, :requires {postagga.tools postagga.tools}, :uses {get-column-m postagga.tools, get-row-m postagga.tools, arg-max-m postagga.tools}, :defs {viterbi {:protocol-inline nil, :meta {:file "/Users/turbopape/work/tasks/js/compiled/out/postagga/tagger.cljc", :line 10, :column 7, :end-line 10, :end-column 14, :arglists (quote ([model observations])), :doc "- states -  in NLP : the tags : [P V ADJ] \n  - intial-probs - je pars de quel mot initialement ? {V 0.2 P 0.3} ...\n  - transition-matrix - avec quell proba on va d'un etat i a  etat j : {[p v] 0.1 [p adj] 0.2...} \n  - emission-matrix - avec quell proba  on a le mot (obseravtion) j si on a le tag (etat) i: {[ p Je] 0.9  [V viens] 0.3 ...} \n  ------------- These are the trained model ---------\n  - observations - in NLP: tokens represnting the sentence to be pos-tagged  [je mange ...]"}, :name postagga.tagger/viterbi, :variadic false, :file "js/compiled/out/postagga/tagger.cljc", :end-column 14, :method-params ([model observations]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model observations])), :doc "- states -  in NLP : the tags : [P V ADJ] \n  - intial-probs - je pars de quel mot initialement ? {V 0.2 P 0.3} ...\n  - transition-matrix - avec quell proba on va d'un etat i a  etat j : {[p v] 0.1 [p adj] 0.2...} \n  - emission-matrix - avec quell proba  on a le mot (obseravtion) j si on a le tag (etat) i: {[ p Je] 0.9  [V viens] 0.3 ...} \n  ------------- These are the trained model ---------\n  - observations - in NLP: tokens represnting the sentence to be pos-tagged  [je mange ...]"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:states :transitions :init-probs :emissions}, :order [:states :init-probs :transitions :emissions]}, :doc nil}